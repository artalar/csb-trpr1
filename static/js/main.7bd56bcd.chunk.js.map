{"version":3,"sources":["App.js","index.js"],"names":["round","n","Number","toFixed","generateHSLA","hue","Math","random","saturation","light","alpha","generateLGData","count","angel","lines","Array","from","length","map","incrementDeg","deg","rate","force","handleFullScreen","e","keyCode","document","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","App","React","useState","speed","setSpeed","lgDataList","setLgDataList","useEffect","requestAnimationFrame","i","background","color","join","generateLG","tabIndex","style","onKeyDown","type","value","onChange","currentTarget","rootElement","getElementById","ReactDOM","render"],"mappings":"2NAGMA,EAAQ,SAACC,GAAD,OAAOC,OAAOD,EAAEE,QAAQ,GAAxB,EAEd,SAASC,EAAT,GAKI,IAAD,IAJDC,WAIC,MAJKL,EAAsB,IAAhBM,KAAKC,UAIhB,MAHDC,kBAGC,MAHYR,EAAsB,GAAhBM,KAAKC,UAGvB,MAFDE,aAEC,MAFO,GAEP,MADDC,aACC,MADO,GACP,EACD,MAAM,QAAN,OAAeL,EAAf,gBAA0BG,EAA1B,cAA0CC,EAA1C,cAAqDC,EAArD,IACD,CAYD,SAASC,IAA2B,IAAZC,EAAW,uDAAH,EAC9B,MAAO,CACLC,MAAOb,EAAsB,IAAhBM,KAAKC,UAClBO,MAAOC,MAAMC,KAAK,CAAEC,OAAQL,IAASM,KAAI,iBAAO,CAC9Cb,IAAKL,EAAsB,IAAhBM,KAAKC,UAChBC,WAAYR,EAAsB,GAAhBM,KAAKC,SAAgB,IAFA,IAK5C,CAED,SAASY,EAAaC,EAAKC,GAAoB,IAAdC,EAAa,uDAAL,GACvC,OAAQF,EAAMC,EAAOC,GAAS,GAC/B,CAED,IAAMC,EAAmB,SAACC,GACN,KAAdA,EAAEC,UACCC,SAASC,kBAGRD,SAASE,gBACXF,SAASE,iBAHXF,SAASG,gBAAgBC,oBAO9B,EAEc,SAASC,IACtB,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCH,IAAMC,UAAS,iBAAM,CACvDtB,EAAe,GACfA,EAAe,GACfA,EAAe,GAHkC,IAAnD,mBAAOyB,EAAP,KAAmBC,EAAnB,KAMAL,IAAMM,WAAU,WACdC,uBAAsB,kBACpBF,EACED,EAAWlB,KAAI,WAAmBsB,GAAnB,IAAG3B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,MAA0B,CACvCD,MAAOM,EAAaN,EAAO,EAAK2B,EAAI,EAAK,EAAGN,EAAQ,IAAM,GAC1DpB,MAAOA,EAAMI,KAAI,gBAAGb,EAAH,EAAGA,IAAKG,EAAR,EAAQA,WAAR,MAA0B,CACzCH,IAAKc,EAAad,EAAK,EAAKmC,EAAI,EAAK,EAAGN,EAAQ,IAAM,GACtD1B,aAFe,IAFJ,IAFG,GAWvB,IAED,IAAMiC,EAAaL,EAChBlB,KAAI,mBA3DT,WAGG,IAFDL,EAEA,uDAFQb,EAAsB,IAAhBM,KAAKC,UACnBO,EACA,uDADQ,CAACV,IAAgBA,IAAgBA,KAEnCQ,EAAQE,EAAMG,OAGpB,OAFAH,EAAQA,EAAMI,KAAI,SAACwB,EAAOF,GAAR,gBAAiBE,EAAjB,YAA0B1C,EAAOwC,EAAI5B,EAAS,KAA9C,QAEZ,mBAAN,OAA0BC,EAA1B,gBAAuCC,EAAM6B,KAAK,KAAlD,IACD,CAmD8BC,CAAtB,EAAG/B,MAAH,EAAUC,MAAoCI,IAAId,GAAlD,IACJuC,KAAK,KAER,OACE,sBACEE,SAAU,EACVC,MAAO,CAAE,OAAQL,GACjBM,UAAWxB,EAHb,SAKE,0CAEE,uBACA,uBACEyB,KAAK,QACLC,MAAOf,EACPgB,SAAU,SAAC1B,GAAD,OAAOW,GAAUX,EAAE2B,cAAcF,MAAjC,QAKnB,CCxFD,IAAMG,EAAc1B,SAAS2B,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACxB,EAAD,MAEFqB,E","file":"static/js/main.7bd56bcd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nconst round = (n) => Number(n.toFixed(0));\n\nfunction generateHSLA({\n  hue = round(Math.random() * 360),\n  saturation = round(Math.random() * 50),\n  light = 50,\n  alpha = 0.3\n}) {\n  return `hsla(${hue}deg, ${saturation}%, ${light}%, ${alpha})`;\n}\n\nfunction generateLG(\n  angel = round(Math.random() * 180),\n  lines = [generateHSLA(), generateHSLA(), generateHSLA()]\n) {\n  const count = lines.length;\n  lines = lines.map((color, i) => `${color} ${round((i / count) * 100)}%`);\n\n  return `linear-gradient(${angel}deg, ${lines.join(\",\")})`;\n}\n\nfunction generateLGData(count = 2) {\n  return {\n    angel: round(Math.random() * 180),\n    lines: Array.from({ length: count }).map(() => ({\n      hue: round(Math.random() * 360),\n      saturation: round(Math.random() * 50 + 50)\n    }))\n  };\n}\n\nfunction incrementDeg(deg, rate, force = 0.5) {\n  return (deg + rate * force) % 360;\n}\n\nconst handleFullScreen = (e) => {\n  if (e.keyCode === 13) {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  }\n};\n\nexport default function App() {\n  const [speed, setSpeed] = React.useState(50);\n  const [lgDataList, setLgDataList] = React.useState(() => [\n    generateLGData(2),\n    generateLGData(3),\n    generateLGData(2)\n  ]);\n\n  React.useEffect(() => {\n    requestAnimationFrame(() =>\n      setLgDataList(\n        lgDataList.map(({ angel, lines }, i) => ({\n          angel: incrementDeg(angel, 1 - (i % 2) * 2, speed / 100 / 2),\n          lines: lines.map(({ hue, saturation }) => ({\n            hue: incrementDeg(hue, 1 - (i % 2) * 2, speed / 100 / 2),\n            saturation\n          }))\n        }))\n      )\n    );\n  });\n\n  const background = lgDataList\n    .map(({ angel, lines }) => generateLG(angel, lines.map(generateHSLA)))\n    .join(\",\");\n\n  return (\n    <main\n      tabIndex={0}\n      style={{ \"--bg\": background }}\n      onKeyDown={handleFullScreen}\n    >\n      <label>\n        speed\n        <br />\n        <input\n          type=\"range\"\n          value={speed}\n          onChange={(e) => setSpeed(+e.currentTarget.value)}\n        />\n      </label>\n    </main>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}